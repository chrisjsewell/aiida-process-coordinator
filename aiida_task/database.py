"""Mock AiiDA database"""
import os

from sqlalchemy import Column, ForeignKey, Integer, String, create_engine, event
from sqlalchemy.orm import declarative_base, sessionmaker
from sqlalchemy.orm.session import Session
from sqlalchemy.sql.expression import text

Base = declarative_base()


class Node(Base):
    """Mock implementation of the node."""

    __tablename__ = "db_dbnode"

    id = Column(Integer, primary_key=True)
    status = Column(String(36), default="created", nullable=False)


class RunningProcesses(Base):
    """A new table, which stores information about running processes."""

    __tablename__ = "db_dbprocess"

    id = Column(Integer, primary_key=True)
    dbnode_id = Column(
        Integer, ForeignKey("db_dbnode.id", ondelete="SET NULL"), nullable=True
    )
    # an action that has been requested for this process: pause | play | kill
    action = Column(String(255), nullable=True)
    # the identifiers for the worker running the process (if assigned)
    # we use an additional uuid, generated by the worker, to guard against pid re-use
    worker_gid = Column(Integer, nullable=True)
    worker_pid = Column(Integer, nullable=True)
    worker_uuid = Column(String(36), nullable=True)


def get_session(path: str) -> Session:
    """Return a new session to connect to the SQLite DB (created if missing)."""
    create = not os.path.exists(path)

    engine = create_engine(f"sqlite:///{path}", future=True)

    # For the next two bindings, see background on
    # https://docs.sqlalchemy.org/en/13/dialects/sqlite.html#serializable-isolation-savepoints-transactional-ddl
    @event.listens_for(engine, "connect")
    def do_connect(dbapi_connection, _):
        """Hook function that is called upon connection.

        It modifies the default behavior of SQLite to use WAL and to
        go back to the 'default' isolation level mode.
        """
        # disable pysqlite's emitting of the BEGIN statement entirely.
        # also stops it from emitting COMMIT before any DDL.
        dbapi_connection.isolation_level = None
        # Open the file in WAL mode (see e.g. https://stackoverflow.com/questions/9671490)
        # This allows to have as many readers as one wants, and a concurrent writer (up to one)
        # Note that this writes on a journal, on a different packs.idx-wal,
        # and also creates a packs.idx-shm file.
        # Note also that when the session is created, you will keep reading from the same version,
        # so you need to close and reload the session to see the newly written data.
        # Docs on WAL: https://www.sqlite.org/wal.html
        cursor = dbapi_connection.cursor()
        cursor.execute("PRAGMA journal_mode=wal;")
        cursor.close()

    # For this binding, see background on
    # https://docs.sqlalchemy.org/en/13/dialects/sqlite.html#serializable-isolation-savepoints-transactional-ddl
    @event.listens_for(engine, "begin")
    def do_begin(conn):  # pylint: disable=unused-variable
        # emit our own BEGIN
        conn.execute(text("BEGIN"))

    if create:
        # Create all tables in the engine. This is equivalent to "Create Table"
        # statements in raw SQL.
        Base.metadata.create_all(engine)

    # Bind the engine to the metadata of the Base class so that the
    # declaratives can be accessed through a DBSession instance
    Base.metadata.bind = engine

    # We set autoflush = False to avoid to lock the DB if just doing queries/reads
    session = sessionmaker(
        bind=engine, autoflush=False, autocommit=False, future=True
    )()

    return session
